/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.hardware.media.omx@1.0;

import IOmxBufferSource;

import android.hardware.media@1.0::types;

/**
 * Ref: frameworks/av/include/media/IOMX.h: IOMXNode
 * Ref: https://www.khronos.org/registry/omxil/specs/OpenMAX_IL_1_1_2_Specification.pdf
 */

/**
 * IOmxNode is an interface for communicating with an OMX component (called
 * "node" here) that has been previously obtained by calling
 * IOmx::allocateNode().
 */
interface IOmxNode {

    /**
     * Free the node.
     *
     * @param[out] status Status of the call.
     */
    freeNode(
        ) generates (
            Status status
        );

    /**
     * Invoke a command on the node.
     *
     * @param[in] cmd Type of the command.
     * @param[in] param Parameter for the command.
     * @param[out] status Status of the call.
     *
     * @see OMX_SendCommand() in the OpenMax IL standard.
     */
    sendCommand(
            uint32_t cmd,
            int32_t param
        ) generates (
            Status status
        );

    /**
     * Retrieve a parameter setting from the node.
     *
     * @param[in] index Type of the parameter to retrieve.
     * @param[in] inParams Information about the retrieval.
     * @param[out] status Status of the call.
     * @param[out] outParams Current parameter setting.
     *
     * @see OMX_GetParameter() in the OpenMax IL standard.
     */
    getParameter(
            uint32_t index,
            Bytes inParams
        ) generates (
            Status status,
            Bytes outParams
        );

    /**
     * Change a parameter setting of the node.
     *
     * @param[in] index Type of the parameter to change.
     * @param[in] params New parameter setting.
     * @param[out] status Status of the call.
     *
     * @see OMX_SetParameter() in the OpenMax IL standard.
     */
    setParameter(
            uint32_t index,
            Bytes params
        ) generates (
            Status status
        );

    /**
     * Retrieve a configuration from the node.
     *
     * @param[in] index Type of the configuration to retrieve.
     * @param[in] inConfig Information about the retrieval.
     * @param[out] status Status of the call.
     * @param[out] outConfig Current configuration.
     *
     * @see OMX_GetConfig() in the OpenMax IL standard.
     */
    getConfig(
            uint32_t index,
            Bytes inConfig
        ) generates (
            Status status,
            Bytes outConfig
        );

    /**
     * Change a configuration of the node.
     *
     * @param[in] index Type of the configuration to change.
     * @param[in] config New configuration.
     * @param[out] status Status of the call.
     *
     * @see OMX_SetConfig() in the OpenMax IL standard.
     */
    setConfig(
            uint32_t index,
            Bytes config
        ) generates (
            Status status
        );

    /**
     * Set the mode of a port on the node.
     *
     * @param[in] portIndex Index of the port.
     * @param[in] mode Target mode on the specified port.
     * @param[out] status Status of the call.
     */
    setPortMode(
            uint32_t portIndex,
            PortMode mode
        ) generates (
            Status status
        );

    /**
     * Prepare a port for adaptive playback. This is based on the extension
     * "OMX.google.android.index.prepareForAdaptivePlayback".
     *
     * @param[in] portIndex Index of the port.
     * @param[in] enable Whether the adaptive playback is enabled or not.
     * @param[in] maxFrameWidth Maximum frame width.
     * @param[in] maxFrameHeight Maximum frame height.
     * @param[out] status Status of the call.
     */
    prepareForAdaptivePlayback(
            uint32_t portIndex,
            bool enable,
            uint32_t maxFrameWidth,
            uint32_t maxFrameHeight
        ) generates (
            Status status
        );

    /**
     * Configure a port for a tunneled playback mode. This is based on the
     * extension "OMX.google.android.index.configureVideoTunnelMode".
     *
     * @param[in] portIndex Index of the port.
     * @param[in] tunneled Whether the tunneled mode is used or not.
     * @param[in] audioHwSync HW SYNC ID of the audio HAL output stream to sync
     * the video with.
     * @param[out] status Status of the call.
     * @param[out] sidebandHandle Codec-allocated sideband window handle.
     */
    configureVideoTunnelMode(
            uint32_t portIndex,
            bool tunneled,
            uint32_t audioHwSync
        ) generates (
            Status status,
            handle sidebandHandle
        );

    /**
     * Retrieve the buffer usage on a port. This is based on the extension
     * "OMX.google.android.index.getAndroidNativeBufferUsage".
     *
     * @param[in] portIndex Index of the port.
     * @param[out] status Status of the call.
     * @param[out] usage Current graphic buffer usage.
     */
    getGraphicBufferUsage(
            uint32_t portIndex
        ) generates (
            Status status,
            uint32_t usage
        );

    /**
     * Set up a listener to events related to the input surface.
     *
     * @param[in] bufferSource Listener object that implements
     * IOmxBufferSource.
     * @param[out] status Status of the call.
     *
     * @see IOmxBufferSource.
     */
    setInputSurface(
            IOmxBufferSource bufferSource
        ) generates (
            Status status
        );

    /**
     * Allocate an opaque buffer on a port as a native handle.
     *
     * @param[in] portIndex Index of the port.
     * @param[in] size Desired size of the buffer.
     * @param[out] status Status of the call.
     * @param[out] buffer Id of the allocated buffer, which will be needed in
     * other buffer-related functions.
     * @param[out] nativeHandle Native handle of the allocated buffer.
     *
     * @see OMX_AllocateBuffer() in the OpenMax IL standard.
     */
    allocateSecureBuffer(
            uint32_t portIndex,
            uint64_t size
        ) generates (
            Status status,
            BufferId buffer,
            handle nativeHandle
        );

    /**
     * Assign a buffer to a port.
     *
     * @param[in] portIndex Index of the port.
     * @param[in] omxBuffer Buffer to be assigned to the port.
     * @param[out] status Status of the call.
     * @param[out] buffer Id of the assigned buffer, which will be needed in
     * other buffer-related functions.
     *
     * @see OMX_UseBuffer() in the OpenMax IL standard.
     */
    useBuffer(
            uint32_t portIndex,
            CodecBuffer omxBuffer
        ) generates (
            Status status,
            BufferId buffer
        );

    /**
     * Free a buffer previously assigned to a port by allocateSecureBuffer() or
     * useBuffer().
     *
     * @param[in] portIndex Index of the port.
     * @param[in] buffer Id of the buffer to be freed.
     * @param[out] status Status of the call.
     *
     * @see OMX_FreeBuffer() in the OpenMax IL standard.
     */
    freeBuffer(
            uint32_t portIndex,
            BufferId buffer
        ) generates (
            Status status
        );

    /**
     * Pass \p fence to the node if it supports fences. Otherwise, it waits on
     * \p fence before calling OMX_FillThisBuffer(). The node will take
     * ownership of the fence even if this call fails.
     *
     * If the port is in metadata mode, the buffer will be updated to point to
     * the new buffer passed in via \p omxBuffer before OMX_FillThisBuffer() is
     * called. Otherwise, \p omxBuffer is not used.
     *
     * @param[in] buffer Id of the buffer to fill.
     * @param[in] omxBuffer New buffer information (in metadata mode).
     * @param[in] fence Fence to wait for (if not null).
     * @param[out] status Status of the call.
     *
     * @see OMX_FillThisBuffer() in the OpenMax IL standard.
     */
    fillBuffer(
            BufferId buffer,
            CodecBuffer omxBuffer,
            Fence fence
        ) generates (
            Status status
        );

    /**
     * Pass \p fence to the node if it supports fences. Otherwise, wait on
     * \p fence before calling OMX_EmptyThisBuffer(). The node will take
     * ownership of the fence even if this call fails.
     *
     * If the port is in metadata mode, the buffer will be updated to point to
     * the new buffer passed in via \p omxBuffer before OMX_EmptyThisBuffer() is
     * called. Otherwise, \p omxBuffer is not used.
     *
     * @param[in] buffer Id of the buffer to fill.
     * @param[in] omxBuffer New buffer information (in metadata mode).
     * @param[in] flags Flags to be passed to OMX_EmptyBuffer().
     * @param[in] timestampUs Timestamp OMX_EmptyBuffer().
     * @param[in] fence Fence to wait for (if not null).
     * @param[out] status Status of the call.
     *
     * @see OMX_EmptyThisBuffer() in the OpenMax IL standard.
     */
    emptyBuffer(
            BufferId buffer,
            CodecBuffer omxBuffer,
            uint32_t flags,
            uint64_t timestampUs,
            Fence fence
        ) generates (
            Status status
        );

    /**
     * Request the node to translate an extension string to an index.
     *
     * @param[in] parameterName Requested extension string.
     * @param[out] status Status of the call.
     * @param[out] index Translated index.
     *
     * @see OMX_GetExtensionIndex() in the OpenMax IL standard.
     */
    getExtensionIndex(
            string parameterName
        ) generates (
            Status status,
            uint32_t index
        );

    /**
     * Add an OMX message on the node's message queue. The instance of
     * IOmxObserver that was obtained during the creation of the node will
     * receive the message in batches by the callback
     * IOmxObserver::onMessages().
     *
     * @param[in] msg Message to send.
     * @param[out] status Status of the call.
     *
     * @see IOmxObserver::onMessages().
     */
    dispatchMessage(
            Message msg
        ) generates (
            Status status
        );

    /**
     * Set quirks.
     *
     * @param[in] quirks Quirks for the component, generally obtained from
     * MediaCodecList::getQuirksFor().
     */
    oneway setQuirks(
            uint32_t quirks
        );

};

