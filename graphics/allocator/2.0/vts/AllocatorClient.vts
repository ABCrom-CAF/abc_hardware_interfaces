component_class: HAL_HIDL
component_type_version: 2.0
component_name: "IAllocatorClient"

package: "android.hardware.graphics.allocator"

import: "android.hardware.graphics.allocator@2.0::types"
import: "android.hardware.graphics.common@1.0::types"

interface: {
    attribute: {
        name: "::android::hardware::graphics::allocator::V2_0::IAllocatorClient::BufferDescriptorInfo"
        type: TYPE_STRUCT
        struct_value: {
            name: "width"
            type: TYPE_SCALAR
            scalar_type: "uint32_t"
        }
        struct_value: {
            name: "height"
            type: TYPE_SCALAR
            scalar_type: "uint32_t"
        }
        struct_value: {
            name: "layerCount"
            type: TYPE_SCALAR
            scalar_type: "uint32_t"
        }
        struct_value: {
            name: "format"
            type: TYPE_ENUM
            predefined_type: "::android::hardware::graphics::common::V1_0::PixelFormat"
        }
        struct_value: {
            name: "producerUsageMask"
            type: TYPE_SCALAR
            scalar_type: "uint64_t"
        }
        struct_value: {
            name: "consumerUsageMask"
            type: TYPE_SCALAR
            scalar_type: "uint64_t"
        }
    }

    api: {
        name: "createDescriptor"
        return_type_hidl: {
            type: TYPE_ENUM
            predefined_type: "::android::hardware::graphics::allocator::V2_0::Error"
        }
        return_type_hidl: {
            type: TYPE_SCALAR
            scalar_type: "uint64_t"
        }
        arg: {
            type: TYPE_STRUCT
            predefined_type: "::android::hardware::graphics::allocator::V2_0::IAllocatorClient::BufferDescriptorInfo"
        }
        callflow: {
            entry: true
        }
        callflow: {
            next: "*"
        }
    }

    api: {
        name: "destroyDescriptor"
        return_type_hidl: {
            type: TYPE_ENUM
            predefined_type: "::android::hardware::graphics::allocator::V2_0::Error"
        }
        arg: {
            type: TYPE_SCALAR
            scalar_type: "uint64_t"
        }
        callflow: {
            exit: true
        }
        callflow: {
            next: "*"
        }
    }

    api: {
        name: "testAllocate"
        return_type_hidl: {
            type: TYPE_ENUM
            predefined_type: "::android::hardware::graphics::allocator::V2_0::Error"
        }
        arg: {
            type: TYPE_VECTOR
            vector_value: {
                type: TYPE_SCALAR
                scalar_type: "uint64_t"
            }
        }
        callflow: {
            next: "allocate"
        }
    }

    api: {
        name: "allocate"
        return_type_hidl: {
            type: TYPE_ENUM
            predefined_type: "::android::hardware::graphics::allocator::V2_0::Error"
        }
        return_type_hidl: {
            type: TYPE_VECTOR
            vector_value: {
                type: TYPE_SCALAR
                scalar_type: "uint64_t"
            }
        }
        arg: {
            type: TYPE_VECTOR
            vector_value: {
                type: TYPE_SCALAR
                scalar_type: "uint64_t"
            }
        }
        callflow: {
            next: "exportHandle"
        }
    }

    api: {
        name: "free"
        return_type_hidl: {
            type: TYPE_ENUM
            predefined_type: "::android::hardware::graphics::allocator::V2_0::Error"
        }
        arg: {
            type: TYPE_SCALAR
            scalar_type: "uint64_t"
        }
        callflow: {
            exit: true
        }
        callflow: {
            next: "*"
        }
    }

    api: {
        name: "exportHandle"
        return_type_hidl: {
            type: TYPE_ENUM
            predefined_type: "::android::hardware::graphics::allocator::V2_0::Error"
        }
        return_type_hidl: {
            type: TYPE_HANDLE
        }
        arg: {
            type: TYPE_SCALAR
            scalar_type: "uint64_t"
        }
        arg: {
            type: TYPE_SCALAR
            scalar_type: "uint64_t"
        }
        callflow: {
            next: "free"
        }
    }

}
